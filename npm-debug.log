0 info it worked if it ends with ok
1 verbose cli [ '/Users/alexcstark/.nvm/versions/node/v6.1.0/bin/node',
1 verbose cli   '/Users/alexcstark/.nvm/versions/node/v6.1.0/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.8.6
3 info using node@v6.1.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/alexcstark/OneDrive/code/custom-node-packages/stork',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/alexcstark/.npm/stork/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/alexcstark/.npm correctMkdir not in flight; initializing
10 info lifecycle stork@1.0.0~prepublish: stork@1.0.0
11 silly lifecycle stork@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/alexcstark/.npm/stork/1.0.0/package.tgz',
12 verbose tar pack   '/Users/alexcstark/OneDrive/code/custom-node-packages/stork' ]
13 verbose tarball /Users/alexcstark/.npm/stork/1.0.0/package.tgz
14 verbose folder /Users/alexcstark/OneDrive/code/custom-node-packages/stork
15 verbose addLocalTarball adding from inside cache /Users/alexcstark/.npm/stork/1.0.0/package.tgz
16 verbose correctMkdir /Users/alexcstark/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd stork@1.0.0
18 verbose afterAdd /Users/alexcstark/.npm/stork/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/alexcstark/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/alexcstark/.npm/stork/1.0.0/package/package.json written
21 silly publish { name: 'stork',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'A SQL ORM with Mongoose-like syntax. Built on top of pgp-promise.',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   author: { name: 'Alex Stark' },
21 silly publish   license: 'ISC',
21 silly publish   readme: '```\nexport const facebookAuthConfig = function(User) {\n  passport.use(new FacebookStrategy({\n    clientID: FB.APP_ID,\n    clientSecret: FB.APP_SECRET,\n    callbackURL: FB.CALLBACK,\n    enableProof: true,\n    profileFields: [\'id\', \'emails\', \'name\']\n  }, function(accessToken, refreshToken, profile, done) {\n    process.nextTick(function() {\n      return User.findOrCreate({\n        name: profile.name.givenName,\n        facebookId: profile.id,\n        facebookAccessToken: accessToken\n      })\n      .then((user) => {\n        console.log(\'got it!\');\n        return done(null, user);\n      })\n      .catch((err) => done(err, null));\n    });\n  }\n  ));\n  ```\n\n\n  import _ from \'lodash\';\n  import Stork from \'./Stork\';\n  import dbConnection from \'./dbConnect\';\n  import SpotsUsers from \'./spotsUsersJoin\';\n  import Promise from \'bluebird\';\n\n  const spotSchema = {\n    columns: {\n      name: \'string\',\n      rating: \'number\',\n      latitude: \'number\',\n      longitude: \'number\',\n      yelp_id: \'string\'\n    },\n    tableName: \'spots\'\n  };\n\n  class Spot extends DB {\n    constructor(dbConnection, schema) {\n      super(dbConnection, schema);\n    }\n\n    getAllForUser(user) {\n      return SpotsUsers.find({userid: user.id})\n        .then((spotsUsers) => {\n          return Promise.all(spotsUsers.map((spotUser) => this.find({id: spotUser.spotid})));\n        })\n        .then((results) => results.map((result) => result[0]))\n        .catch((err) => console.log(err));\n    }\n  }\n\n  export default new Spot(dbConnection, spotSchema);\n\n  mport DB from \'./queries\';\n  import {createInsertQuery} from \'./queryHelpers\';\n\n  const userSchema = {\n    columns: {\n      name: \'string\',\n      username: \'string\',\n      password: \'string\',\n      facebookId: \'number\',\n      facebookAccessToken: \'string\'\n    },\n    tableName: \'users\'\n  };\n\n  class User extends DB {\n    constructor(dbConnection, userSchema) {\n      super(dbConnection, userSchema);\n    }\n\n    create(obj) {\n      return this.pg.query(createInsertQuery(this.schema, {\n        username: obj.username,\n        password: this.generateHash(obj.password)\n      }));\n    }\n\n    generateHash(password) {\n      return bcrypt.hashSync(password, bcrypt.genSaltSync(10));\n    }\n\n    isValidPassword(password, id) {\n      return this.find({id: id})\n      .then((user) => {\n        return bcrypt.compareSync(password, user[0].password);\n      })\n      .catch((err) => console.log(err));\n    }\n  }\n\n  export default new User(dbConnection, userSchema);\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '9c7fc91c958c5c1e65871acc003bb3d3bd2e56c1',
21 silly publish   _id: 'stork@1.0.0',
21 silly publish   _shasum: 'cc9aeca7d99b2c59286c387cdab23f35f45742db',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name stork
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'stork',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'stork',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/stork
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/alexcstark/.npm/stork/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/stork
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 3:48:21 PM
33 verbose request using bearer token for auth
34 verbose request id 5cf1aae895dabdfb
35 http request PUT https://registry.npmjs.org/stork
36 http 403 https://registry.npmjs.org/stork
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '99',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Thu, 28 Jul 2016 22:48:21 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-sea1920-SEA',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1469746101.472453,VS0,VE66',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/alexcstark/.npm/registry.npmjs.org/stork on PUT
39 error publish Failed PUT 403
40 verbose stack Error: you do not have permission to publish "stork". Are you logged in as the correct user? : stork
40 verbose stack     at makeError (/Users/alexcstark/.nvm/versions/node/v6.1.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/Users/alexcstark/.nvm/versions/node/v6.1.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/Users/alexcstark/.nvm/versions/node/v6.1.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/Users/alexcstark/.nvm/versions/node/v6.1.0/lib/node_modules/npm/node_modules/request/request.js:199:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/Users/alexcstark/.nvm/versions/node/v6.1.0/lib/node_modules/npm/node_modules/request/request.js:1036:10)
40 verbose stack     at emitOne (events.js:101:20)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/Users/alexcstark/.nvm/versions/node/v6.1.0/lib/node_modules/npm/node_modules/request/request.js:963:12)
41 verbose statusCode 403
42 verbose pkgid stork
43 verbose cwd /Users/alexcstark/OneDrive/code/custom-node-packages/stork
44 error Darwin 15.5.0
45 error argv "/Users/alexcstark/.nvm/versions/node/v6.1.0/bin/node" "/Users/alexcstark/.nvm/versions/node/v6.1.0/bin/npm" "publish"
46 error node v6.1.0
47 error npm  v3.8.6
48 error code E403
49 error you do not have permission to publish "stork". Are you logged in as the correct user? : stork
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
